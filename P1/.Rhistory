adult.training <- read.csv("adult.training.csv", header = TRUE, sep = ",")
library(readr)
adult_test <- read_csv("~/GitHub/master_informatica-SIGE/S4/adult.test.csv")
View(adult_test)
library(readr)
adult_training <- read_csv("~/GitHub/master_informatica-SIGE/S4/adult.training.csv")
View(adult_training)
adult.training <- read.csv("adult.training.csv", header = TRUE, sep = ",")
adult.test <- read.csv("adult.test.csv", header = TRUE, sep = ",")
setwd("~/GitHub/master_informatica-SIGE/P1")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
library(rpart)
install.packages('randomForest')
library(randomForest)
install.packages('party')
library(party)
test$Survived <- NA
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
summary(combi$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Age),], method="anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
summary(combi)
summary(combi$Embarked)
which(combi$Embarked == '')
combi$Embarked[c(62,830)] = "S"
combi$Embarked <- factor(combi$Embarked)
summary(combi$Fare)
which(is.na(combi$Fare))
combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
combi$FamilyID2 <- factor(combi$FamilyID2)
train <- combi[1:891,]
test <- combi[892:1309,]
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
varImpPlot(fit)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "firstforest.csv", row.names = FALSE)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "ciforest.csv", row.names = FALSE)
library(xgboost)
fit <- xgboost(data=train, nfold=5, nrounds=2, objective="binary:logistic")
predictorsNames = names(train)[names(train) != 'response']
dtrain<-xgb.DMatrix(data=data.matrix(train[,predictorsNames]),label=train$response)
summary(combi$Fare)
which(is.na(combi$Fare))
combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)
answer = as.numeric(combi$response[1:891])
combi = combi[,!(names(combi)%in%c('response','Name','Surname','Ticket','Cabin'))]
num_var_names<-sapply(combi,is.numeric)
num_var_names<-attr(num_var_names[num_var_names==T],"names")
combinum = combi[,(names(combi) %in% num_var_names)]
combifac = combi[,!(names(combi) %in% num_var_names)]
combifacDummy <- dummyVars("~.",data=combifac,fullRank=T)
combifac <- as.data.frame(predict(combifacDummy,combifac))
combi = cbind(combinum,combifac)
train <- combi[1:891,]
train$response = answer
test <- combi[892:1309,]
predictorsNames = names(train)[names(train) != 'response'] #names of columns after data conversion
dtrain<-xgb.DMatrix(data=data.matrix(train[,predictorsNames]),label=train$response)
dtest<-data.matrix(test[,predictorsNames])
param <- list(  objective           = "binary:logistic",
booster             = "gbtree",
eval_metric         = "logloss",
eta                 = 0.001, # 0.06, #0.01,
max_depth           = 15, #changed from default of 8
subsample           = 0.908, # 0.7
colsample_bytree    = 0.592, # 0.7
min_child_weight    = 1
)
nround  = 33 #use 3382
set.seed(2045)
clf <- xgboost(param =param, dtrain, nrounds=nround, min_child_weight=1,verbose=0)
install.packages('kernlab')
library(kernlab)
install.packages('caret')
library(caret)
install.packages('xgboost')
library(xgboost)
test$Survived <- NA
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
summary(combi$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data=combi[!is.na(combi$Age),], method="anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
summary(combi)
summary(combi$Embarked)
which(combi$Embarked == '')
combi$Embarked[c(62,830)] = "S"
combi$Embarked <- factor(combi$Embarked)
summary(combi$Fare)
which(is.na(combi$Fare))
combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)
answer = as.numeric(combi$response[1:891])
combi = combi[,!(names(combi)%in%c('response','Name','Surname','Ticket','Cabin'))]
num_var_names<-sapply(combi,is.numeric)
num_var_names<-attr(num_var_names[num_var_names==T],"names")
combinum = combi[,(names(combi) %in% num_var_names)]
combifac = combi[,!(names(combi) %in% num_var_names)]
combifacDummy <- dummyVars("~.",data=combifac,fullRank=T)
combifac <- as.data.frame(predict(combifacDummy,combifac))
combi = cbind(combinum,combifac)
train <- combi[1:891,]
train$response = answer
test$Survived <- NA
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
